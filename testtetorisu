<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Tetris Mobile Version</title>
  <style>
    body {
      background: #222;
      color: #fff;
      font-family: sans-serif;
      text-align: center;
      margin: 0;
      padding: 0;
    }
    .container {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      margin-top: 10px;
    }
    .panel {
      margin: 5px;
    }
    canvas {
      background: #000;
      display: block;
      margin: 0 auto;
    }
    #score {
      font-size: 20px;
      margin-top: 10px;
    }
    /* タッチ用コントローラ */
    #controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin-top: 10px;
    }
    .ctrl-button {
      background: #444;
      border: none;
      color: #fff;
      font-size: 16px;
      padding: 15px 20px;
      margin: 5px;
      border-radius: 5px;
      flex: 1 0 30%;
    }
    .ctrl-button:active {
      background: #666;
    }
    /* PCとスマホ両対応。スマホの場合は下部コントローラを固定 */
    @media (max-width: 600px) {
      #controls {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.8);
        padding: 10px 0;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- ホールド表示エリア -->
    <div class="panel">
      <div>Hold</div>
      <canvas id="hold" width="120" height="120"></canvas>
    </div>
    <!-- メインフィールド -->
    <div class="panel">
      <canvas id="tetris" width="240" height="400"></canvas>
      <div id="score">Score: 0</div>
    </div>
    <!-- 次ピース表示エリア -->
    <div class="panel">
      <div>Next</div>
      <canvas id="next" width="120" height="240"></canvas>
    </div>
  </div>
  
  <!-- タッチ操作用コントローラ（スマホ用） -->
  <div id="controls">
    <button class="ctrl-button" id="btn-left">←</button>
    <button class="ctrl-button" id="btn-right">→</button>
    <button class="ctrl-button" id="btn-down">↓</button>
    <button class="ctrl-button" id="btn-rotate">⟳</button>
    <button class="ctrl-button" id="btn-harddrop">↑</button>
    <button class="ctrl-button" id="btn-hold">Hold (E)</button>
  </div>
  
  <script>
    // 各canvasとcontextの取得
    const canvas = document.getElementById('tetris');
    const context = canvas.getContext('2d');
    context.scale(20,20);
    
    const holdCanvas = document.getElementById('hold');
    const holdContext = holdCanvas.getContext('2d');
    holdContext.scale(20,20);
    
    const nextCanvas = document.getElementById('next');
    const nextContext = nextCanvas.getContext('2d');
    nextContext.scale(20,20);

    // 色定義
    const colors = [
      null,
      '#FF0D72', // T
      '#0DC2FF', // O
      '#0DFF72', // L
      '#F538FF', // J
      '#FF8E0D', // I
      '#FFE138', // S
      '#3877FF'  // Z
    ];

    // アリーナ作成
    function createMatrix(w, h) {
      const matrix = [];
      while (h--) {
        matrix.push(new Array(w).fill(0));
      }
      return matrix;
    }

    // ピース作成
    function createPiece(type) {
      if (type === 'T') {
        return [
          [0,0,0],
          [1,1,1],
          [0,1,0],
        ];
      } else if (type === 'O') {
        return [
          [2,2],
          [2,2],
        ];
      } else if (type === 'L') {
        return [
          [0,3,0],
          [0,3,0],
          [0,3,3],
        ];
      } else if (type === 'J') {
        return [
          [0,4,0],
          [0,4,0],
          [4,4,0],
        ];
      } else if (type === 'I') {
        return [
          [0,5,0,0],
          [0,5,0,0],
          [0,5,0,0],
          [0,5,0,0],
        ];
      } else if (type === 'S') {
        return [
          [0,6,6],
          [6,6,0],
          [0,0,0],
        ];
      } else if (type === 'Z') {
        return [
          [7,7,0],
          [0,7,7],
          [0,0,0],
        ];
      }
    }

    // グローバル変数
    const arena = createMatrix(12,20);
    const player = {
      pos: { x: 0, y: 0 },
      matrix: null,
      score: 0,
    };
    let holdPiece = null;
    let bag = [];

    // シャッフル関数
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i+1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    // バッグシステム：次のピース取得
    function getNextPiece() {
      if (bag.length === 0) {
        bag = shuffle(['T','J','L','O','I','S','Z']);
      }
      return createPiece(bag.pop());
    }

    // 次ピースプレビュー用：バッグ内から先頭2個（足りなければ補う）
    function getPreviewPieces() {
      let preview = [];
      let bagCopy = bag.slice();
      if (bagCopy.length < 2) {
        bagCopy = bagCopy.concat(shuffle(['T','J','L','O','I','S','Z']));
      }
      preview.push(createPiece(bagCopy[bagCopy.length-1]));
      preview.push(createPiece(bagCopy[bagCopy.length-2]));
      return preview;
    }

    // 描画関数：指定contextに描画
    function drawMatrix(matrix, offset, ctx) {
      matrix.forEach((row, y) => {
        row.forEach((value, x) => {
          if (value !== 0) {
            ctx.fillStyle = colors[value];
            ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
          }
        });
      });
    }

    // メイン描画
    function draw() {
      context.fillStyle = '#000';
      context.fillRect(0, 0, canvas.width, canvas.height);
      drawMatrix(arena, {x:0, y:0}, context);
      drawMatrix(player.matrix, player.pos, context);
    }

    // ホールド描画
    function drawHold() {
      holdContext.fillStyle = '#000';
      holdContext.fillRect(0, 0, holdCanvas.width, holdCanvas.height);
      if (holdPiece) {
        drawMatrix(holdPiece, {x:0.5, y:0.5}, holdContext);
      }
    }

    // 次ピース描画（2個分）
    function drawNext() {
      nextContext.fillStyle = '#000';
      nextContext.fillRect(0, 0, nextCanvas.width, nextCanvas.height);
      const preview = getPreviewPieces();
      drawMatrix(preview[0], {x:1, y:0.5}, nextContext);
      drawMatrix(preview[1], {x:1, y:3.5}, nextContext);
    }

    // マージ：プレイヤーのピースをアリーナに固定
    function merge(arena, player) {
      player.matrix.forEach((row, y) => {
        row.forEach((value, x) => {
          if (value !== 0) {
            arena[y + player.pos.y][x + player.pos.x] = value;
          }
        });
      });
    }

    // 衝突判定
    function collide(arena, player) {
      const [m, o] = [player.matrix, player.pos];
      for (let y = 0; y < m.length; ++y) {
        for (let x = 0; x < m[y].length; ++x) {
          if (m[y][x] !== 0 &&
              (arena[y+o.y] && arena[y+o.y][x+o.x]) !== 0) {
            return true;
          }
        }
      }
      return false;
    }

    // ライン消去
    function arenaSweep() {
      let rowCount = 1;
      outer: for (let y = arena.length-1; y > 0; --y) {
        for (let x = 0; x < arena[y].length; ++x) {
          if (arena[y][x] === 0) {
            continue outer;
          }
        }
        const row = arena.splice(y,1)[0].fill(0);
        arena.unshift(row);
        ++y;
        player.score += rowCount * 10;
        rowCount *= 2;
      }
    }

    // 通常落下
    function playerDrop() {
      player.pos.y++;
      if (collide(arena, player)) {
        player.pos.y--;
        merge(arena, player);
        playerReset();
        arenaSweep();
        updateScore();
      }
      dropCounter = 0;
    }

    // ハードドロップ：衝突するまで下に移動
    function hardDrop() {
      while (!collide(arena, player)) {
        player.pos.y++;
        player.score++; // 落下距離でスコア加算（任意）
      }
      player.pos.y--;
      merge(arena, player);
      playerReset();
      arenaSweep();
      updateScore();
      dropCounter = 0;
    }

    // 横移動
    function playerMove(dir) {
      player.pos.x += dir;
      if (collide(arena, player)) {
        player.pos.x -= dir;
      }
    }

    // 回転
    function playerRotate(dir) {
      const pos = player.pos.x;
      let offset = 1;
      rotate(player.matrix, dir);
      while (collide(arena, player)) {
        player.pos.x += offset;
        offset = -(offset + (offset > 0 ? 1 : -1));
        if (offset > player.matrix[0].length) {
          rotate(player.matrix, -dir);
          player.pos.x = pos;
          return;
        }
      }
    }

    // マトリックス回転（転置＋反転）
    function rotate(matrix, dir) {
      for (let y = 0; y < matrix.length; ++y) {
        for (let x = 0; x < y; ++x) {
          [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
        }
      }
      if (dir > 0) {
        matrix.forEach(row => row.reverse());
      } else {
        matrix.reverse();
      }
    }

    let dropCounter = 0;
    let dropInterval = 1000;
    let lastTime = 0;

    function update(time = 0) {
      const deltaTime = time - lastTime;
      lastTime = time;
      dropCounter += deltaTime;
      if (dropCounter > dropInterval) {
        playerDrop();
      }
      draw();
      drawHold();
      drawNext();
      requestAnimationFrame(update);
    }

    // スコア更新
    function updateScore() {
      document.getElementById('score').innerText = 'Score: ' + player.score;
    }

    // プレイヤーリセット
    function playerReset() {
      player.matrix = getNextPiece();
      player.pos.y = 0;
      player.pos.x = (arena[0].length / 2 | 0) - (player.matrix[0].length / 2 | 0);
      if (collide(arena, player)) {
        arena.forEach(row => row.fill(0));
        player.score = 0;
        updateScore();
      }
    }

    // キーボード操作（PC用）
    document.addEventListener('keydown', event => {
      if (event.keyCode === 37) {       // 左
        playerMove(-1);
      } else if (event.keyCode === 39) { // 右
        playerMove(1);
      } else if (event.keyCode === 40) { // 下
        playerDrop();
      } else if (event.keyCode === 38) { // ↑：ハードドロップ
        hardDrop();
      } else if (event.keyCode === 81) { // Q：反時計回り
        playerRotate(-1);
      } else if (event.keyCode === 87) { // W：時計回り
        playerRotate(1);
      } else if (event.key.toLowerCase() === 'e') { // E：ホールド
        holdAction();
      }
    });

    // ホールド処理関数
    function holdAction() {
      if (!holdPiece) {
        holdPiece = player.matrix;
        playerReset();
      } else {
        let temp = player.matrix;
        player.matrix = holdPiece;
        holdPiece = temp;
        player.pos.y = 0;
        player.pos.x = (arena[0].length / 2 | 0) - (player.matrix[0].length / 2 | 0);
        if (collide(arena, player)) {
          arena.forEach(row => row.fill(0));
          player.score = 0;
          updateScore();
        }
      }
      drawHold();
    }

    // タッチ操作用：各ボタンにイベントリスナー追加
    function addTouchControls() {
      const btnLeft = document.getElementById('btn-left');
      const btnRight = document.getElementById('btn-right');
      const btnDown = document.getElementById('btn-down');
      const btnRotate = document.getElementById('btn-rotate');
      const btnHardDrop = document.getElementById('btn-harddrop');
      const btnHold = document.getElementById('btn-hold');

      btnLeft.addEventListener('touchstart', e => { e.preventDefault(); playerMove(-1); });
      btnRight.addEventListener('touchstart', e => { e.preventDefault(); playerMove(1); });
      btnDown.addEventListener('touchstart', e => { e.preventDefault(); playerDrop(); });
      btnRotate.addEventListener('touchstart', e => { e.preventDefault(); playerRotate(1); });
      btnHardDrop.addEventListener('touchstart', e => { e.preventDefault(); hardDrop(); });
      btnHold.addEventListener('touchstart', e => { e.preventDefault(); holdAction(); });
    }

    addTouchControls();
    playerReset();
    update();
  </script>
</body>
</html>
